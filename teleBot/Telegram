import time
import telepot
from telepot import Bot
from telepot.loop import MessageLoop
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton
import json
import requests
import time
import cherrypy

class Telegrambot():

    def __init__(self, token):
        self.tokenBot = token
        self.bot = telepot.Bot(self.tokenBot)
        self.serviceId = self.conf["serviceId"]
        self.client = MyMQTT("Smartmubot", self.conf["broker"], int(self.conf["port"]), self)
        self.client.start()
        self.overtempTopic = self.conf["overtempTopic"]
        self.lightTopic = self.conf["lightTopic"]
        self.switchTopic = self.conf["switchTopic"]
        self.__message = {"start": "", "info": ""}
        MessageLoop(self.bot, {'chat': self.on_chat_message}).run_as_thread()

    regMsg = {"registerType": "service",
                  "id": self.serviceId,
                  "type": "telegram",
                  "attribute": {"chatid": self.conf["client"],
                                "topic": self.overtempTopic,
                                "topic": self.lightTopic,
                                "topic": self.switchTopic,
                                }}

    def initial_message(msg):
        #design as reply keyboard
        content_type, chat_type, chat_id = telepot.glance(msg)
        self.chatIDs.append(chat_ID)
        message = msg['text']
        if msg['text'] == '/start':
            mark_up = ReplyKeyboardMarkup(keyboard=[['/Client'], ['/Administrator']],
                                          one_time_keyboard=True)
            bot.sendMessage(chat_id, text='Welcome to the museum!', reply_markup=mark_up)
        else:
            bot.sendMessage(chat_id, 'Please enter the correct command!')



    def client_message(self, msg):
        content_type, chat_type, chat_id = telepot.glance(msg)
        print(content_type, chat_type, chat_id)
        message = msg['text']
        if msg['text'] == '/client':
           bot.sendMessage(chat_id,
                           parse_mode = 'Markdown',
                           text='*What do you want to know about the Museum?*/n [historical data](https://thingspeak.com/channels/1334459)/n[Current number of people in each area](https://thingspeak.com/channels/1334459)'
                           )

        elif msg['text'] == '/Administrator':
           bot.sendMessage(chat_id, 'Please enter the password')

           bot.inlineKeyboardMarkup = {};
           inlineKeyboardMarkup.inline_keyboard = [];
           bot.keyboardRow = [];

           bot.keyboardButton1 = {
               text: "historical data",
               url: "https://thingspeak.com/channels/1334459"
           };

           bot.keyboardButton2 = {
               text: "Current number of people in each area",
               url: "https://thingspeak.com/channels/1334459"
           };
           bot.keyboardButton3 = {
               text: "Total energy savings",
               url: "https://thingspeak.com/channels/1334459"
           };
        if msg['text'] == '/switchoff':
           mark_up = ReplyKeyboardMarkup(keyboard=[['zoneA'],['zoneB'],['zoneC'],['zoneD']], one_time_keyboard=True)
           bot.sendMessage(chat_id, text='What light would you like to turn off?', reply_markup=mark_up)
        elif msg['text'] == 'switchon':
           bot.sendMessage(chat_id, text='turn on all the lights', reply_markup=mark_up)



    def get_url():
        contents = requests.get('https://thingspeak.com/channels/1334459').json()
        url = contents['url']
        return urlcc

    def sendImageRemoteFile(img_url):
        url = "https://api.telegram.org/bot<Token>/sendPhoto";
        remote_image = requests.get(img_url)
        photo = io.BytesIO(remote_image.content)
        photo.name = 'img.png'
        files = {'photo': photo}
        data = {'chat_id': "YOUR_CHAT_ID"}
        r = requests.post(url, files=files, data=data)
        print(r.status_code, r.reason, r.content)


    def notify(self, topic,chatid):
        chat_id = update.message.chat.id
        if topic == self.overtempTopic:
           with open('image.jpg', 'rb') as overtemperature_image:
              caption = "<a herf = 'https://>"
              bot = send_photo(
                 chat_id,
                 photo=overtemperature_image,
                 caption = caption,
                 parse_mode = 'HTML'
              )



if __name__ == "__main__":
    config = {
      "api_token": '1763352169:AAEcAAE8wmmNIYg1PQ8RH6yMRDZ3FV7ebHQ',
      "proxy": "http://127.0.0.1:8118"
     }
    bot = telepot.Bot(TOKEN)
    MessageLoop(bot, handle).run_as_thread()
    print ('waiting ...')

# Keep the program running.
    while 1:
        time.sleep(10)
